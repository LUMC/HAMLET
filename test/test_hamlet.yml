# HAMLET pipeline should attempt to generate specified files, including the
# output files of fusioncatcher
- name: test-hamlet-dry-run-trio
  tags:
    - dry-run
    - hamlet
  command: >
    snakemake -n
    --snakefile Snakefile
    --reason
    --printshellcmds
    --verbose
    --configfile test/data/config/chrM-fusioncatcher.json
    --config pepfile=test/pep/chrM-trio.csv
  stdout:
    contains:
      # The pipeline should create the final output files for TestSample1
      - "TestSample1/TestSample1.summary.json"
      - "TestSample1/hamlet_results.TestSample1.zip"
      - "TestSample1/hamlet_report.TestSample1.pdf"
      - "TestSample1/TestSample1.summary.json"
      # The pipeline should create the final output files for TestSample2
      - "TestSample2/TestSample2.summary.json"
      - "TestSample2/hamlet_results.TestSample2.zip"
      - "TestSample2/hamlet_report.TestSample2.pdf"
      - "TestSample2/TestSample2.summary.json"
      # The pipeline should create the final output files for TestSample3
      - "TestSample3/TestSample3.summary.json"
      - "TestSample3/hamlet_results.TestSample3.zip"
      - "TestSample3/hamlet_report.TestSample3.pdf"
      - "TestSample3/TestSample3.summary.json"

    contains_regex:
      # The align_vars rule should use the output of the qc-seq module
      - 'gsnap .* --gunzip TestSample1/TestSample1.R1.fq.gz'
      - 'gsnap .* --gunzip TestSample2/TestSample2.R1.fq.gz'
      - 'gsnap .* --gunzip TestSample3/TestSample3.R1.fq.gz'
      # The idsort_aln rule should use the output of the snv-indels module
      - 'picard .* SortSam *I=TestSample1/snv-indels/TestSample1.snv-indel.bam'
      - 'picard .* SortSam *I=TestSample2/snv-indels/TestSample2.snv-indel.bam'
      - 'picard .* SortSam *I=TestSample3/snv-indels/TestSample3.snv-indel.bam'
      # The count_raw_bases rule should use the output of the snv-indels module
      - 'bedtools coverage *-split .* -abam TestSample1/snv-indels/TestSample1.snv-indel.bam'
      - 'bedtools coverage *-split .* -abam TestSample2/snv-indels/TestSample2.snv-indel.bam'
      - 'bedtools coverage *-split .* -abam TestSample3/snv-indels/TestSample3.snv-indel.bam'
      # The star_fusion rule should use the output of the qc-seq module
      - 'STAR-Fusion .* --left_fq TestSample1/TestSample1.R1.fq.gz'
      - 'STAR-Fusion .* --left_fq TestSample2/TestSample2.R1.fq.gz'
      - 'STAR-Fusion .* --left_fq TestSample3/TestSample3.R1.fq.gz'
      # The fusioncather rule should use the output of the qc-seq module
      - 'fusioncatcher.py .* -i TestSample1/TestSample1.R1.fq.gz'
      - 'fusioncatcher.py .* -i TestSample2/TestSample2.R1.fq.gz'
      - 'fusioncatcher.py .* -i TestSample3/TestSample3.R1.fq.gz'
      # The align_kmt2a rule should use the output of the qc-seq module
      - 'bwa mem .*kmt2a-213.fa *TestSample1/TestSample1.R1.fq.gz'
      - 'bwa mem .*kmt2a-213.fa *TestSample2/TestSample2.R1.fq.gz'
      - 'bwa mem .*kmt2a-213.fa *TestSample3/TestSample3.R1.fq.gz'
      # The align_flt3 rule should use the output of the qc-seq module
      - 'bwa mem .*flt3-001.fa *TestSample1/TestSample1.R1.fq.gz'
      - 'bwa mem .*flt3-001.fa *TestSample2/TestSample2.R1.fq.gz'
      - 'bwa mem .*flt3-001.fa *TestSample3/TestSample3.R1.fq.gz'

# Singularity should be available
- name: test-hamlet-sanity-singularity
  tags:
    - sanity
    - hamlet
  command: >
    singularity --version
  stdout:
    contains_regex:
      - "singularity(-ce)? version 3"

# HAMLET should run without crashing on targetted RNAseq data, which gives no
# results for most modules (Does not run fusioncatcher)
- name: test-hamlet-targetted-RNA
  tags:
    - functional
    - hamlet
  command: >
    snakemake -rp
    --snakefile Snakefile
    --configfile test/data/config/chrM.json
    --config pepfile=test/pep/targetted.csv
    --cores 1
    --verbose
    --use-singularity
    --singularity-args '--cleanenv --bind /tmp'
    --singularity-prefix '~/.singularity/cache/snakemake'

# HAMLET pipeline should not run fusioncatcher by default
- name: test-hamlet-dry-run-chrM
  tags:
    - dry-run
    - hamlet
  command: >
    snakemake -n
    --snakefile Snakefile
    --reason
    --printshellcmds
    --configfile test/data/config/chrM.json
    --config pepfile=test/pep/chrM.csv
  stdout:
    must_not_contain:
      - fusioncatcher

# HAMLET pipeline should run fusioncatcher when fusioncatcher_data is specified
- name: test-hamlet-dry-run-chrM-fusioncatcher
  tags:
    - dry-run
    - hamlet
  command: >
    snakemake -n
    --snakefile Snakefile
    --reason
    --printshellcmds
    --configfile test/data/config/chrM-fusioncatcher.json
    --config pepfile=test/pep/chrM.csv
  stdout:
    contains:
      - fusioncatcher

# HAMLET pipeline should run successfully with default settings
- name: test-hamlet-chrM
  tags:
    - functional
    - hamlet
  command: >
    snakemake
    --snakefile Snakefile
    --configfile test/data/config/chrM.json
    --config pepfile=test/pep/chrM.csv
    --cores 1
    --notemp
    --verbose
    --use-singularity
    --singularity-args '--cleanenv --bind /tmp'
    --singularity-prefix '~/.singularity/cache/snakemake'
  files:
    # HAMLET pipeline should generate the final output files
    - path: SRR8615409/hamlet_results.SRR8615409.zip
    - path: SRR8615409/SRR8615409.summary.json
    - path: SRR8615409/hamlet_report.SRR8615409.pdf
    # Test log files
    - path: "log/create_summary.SRR8615409.txt"
    - path: "log/generate_report.SRR8615409.txt"
    - path: "log/package_results.SRR8615409.txt"

- name: lint-hamlet
  tags:
    - sanity
    - hamlet
  command: >
    snakemake
    --lint
    --snakefile Snakefile
    --configfile test/data/config/chrM.json
    --config pepfile=test/pep/chrM.csv

- name: snakefmt-hamlet
  tags:
    - sanity
    - hamlet
  command: snakefmt --check .
