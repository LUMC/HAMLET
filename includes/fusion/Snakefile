include: "common.smk"

localrules: combine_plots, intersect_fusions, plot_cp, plot_isect, plot_sf, star_fusion_cp, subset_sf

rule all:
    input:
        star_predictions=expand("{sample}/fusion/star-fusion/star-fusion.fusion_predictions.tsv", sample=samples),
        star_final=expand("{sample}/fusion/{sample}.star-fusion", sample=samples),
        sf_svg=expand("{sample}/fusion/{sample}.star-fusion-circos/fsnviz.svg", sample=samples),
        sf_png=expand("{sample}/fusion/{sample}.star-fusion-circos/fsnviz.png", sample=samples),
        fusion_catcher_outputs=get_fusioncatcher_outputs(),

rule star_fusion:
    input:
        fq1=get_forward,
        fq2=get_reverse,
        lib=config["genome_star_fusion_lib"]
    params:
        folder="{sample}/fusion/star-fusion"
    output:
        txt="{sample}/fusion/star-fusion/star-fusion.fusion_predictions.tsv"
    threads: 8
    singularity: containers["star-fusion"]
    shell:
        "(rm -rf {params.folder}"
        " && STAR-Fusion --genome_lib_dir {input.lib}"
        "   --output_dir {params.folder}"
        "   --left_fq {input.fq1} --right_fq {input.fq2})"

rule star_fusion_cp:
    input:
        txt="{sample}/fusion/star-fusion/star-fusion.fusion_predictions.tsv",
        src=config["sf_rewrite_script"],
    output:
        txt="{sample}/fusion/{sample}.star-fusion",
    singularity: containers["fsnviz"]
    shell:
        "python3 {input.src} {input.txt} > {output.txt}"

rule plot_sf:
    input:
        txt="{sample}/fusion/{sample}.star-fusion",
    output:
        svg="{sample}/fusion/{sample}.star-fusion-circos/fsnviz.svg",
        png="{sample}/fusion/{sample}.star-fusion-circos/fsnviz.png",
    singularity: containers["fsnviz"]
    shell:
        "PERL5LIB=\"\" fsnviz --out-dir `dirname {output.svg}` --png"
        " -k human.hg38 star-fusion {input.txt}"

rule plot_cp:
    input:
        svg="{sample}/fusion/{sample}.{ext}-circos/fsnviz.svg",
    output:
        svg="{sample}/fusion/{sample}.{ext}.svg",
    wildcard_constraints:
        ext="star-fusion|sf-isect|fusioncatcher",
    singularity: containers["debian"]
    shell:
        "cp {input.svg} {output.svg}"

rule fusioncatcher:
    input:
        fq1=get_forward,
        fq2=get_reverse,
    params:
        data=config["fusioncatcher_data"],
        max_junctions=1500000
    output:
        txt="{sample}/fusion/fusioncatcher/final-list_candidate-fusion-genes.txt"
    threads: 8
    singularity: containers["fusioncatcher"]
    shell:
        " dir=`dirname {output.txt}` "
        " && fusioncatcher.py --threads {threads} -i {input.fq1},{input.fq2} -o ${{dir}}"
        " --data {params.data} --limitSjdbInsertNsj {params.max_junctions} || test -f {output.txt}"

rule fusioncatcher_cp:
    input:
        txt="{sample}/fusion/fusioncatcher/final-list_candidate-fusion-genes.txt",
    output:
        txt="{sample}/fusion/{sample}.fusioncatcher",
    singularity: containers["debian"]
    shell:
        "cp {input.txt} {output.txt}"

rule plot_fc:
    input:
        txt="{sample}/fusion/{sample}.fusioncatcher",
    output:
        svg="{sample}/fusion/{sample}.fusioncatcher-circos/fsnviz.svg",
        png="{sample}/fusion/{sample}.fusioncatcher-circos/fsnviz.png",
    singularity: containers["fsnviz"]
    shell:
        "PERL5LIB=\"\" fsnviz --out-dir `dirname {output.svg}` --png"
        " -k human.hg38 fusioncatcher {input.txt}"

rule intersect_fusions:
    input:
        sf="{sample}/fusion/{sample}.star-fusion",
        fc="{sample}/fusion/{sample}.fusioncatcher",
        bed=config["transcripts_bed"],
    output:
        txt="{sample}/fusion/{sample}.fuma",
    singularity: containers["fuma"]
    shell:
        "fuma -a hg38:{input.bed} -s"
        " fc-{wildcards.sample}:fusion-catcher_final:{input.fc}"
        " sf-{wildcards.sample}:star-fusion_final:{input.sf}"
        " -l \"fc-{wildcards.sample}:hg38\" \"sf-{wildcards.sample}:hg38\""
        " -f extensive -o -"
        " | grep -vE \"FuMa::\""
        " > {output.txt}"

rule subset_sf:
    input:
        sf="{sample}/fusion/{sample}.star-fusion",
        isect="{sample}/fusion/{sample}.fuma",
        subset_script=config["sf_subset_script"],
    output:
        sf="{sample}/fusion/{sample}.sf-isect",
    singularity: containers["hamlet-scripts"]
    shell:
        "python3 {input.subset_script} {input.isect} {input.sf} > {output.sf} || rm -f {output.sf}"

rule plot_isect:
    input:
        txt="{sample}/fusion/{sample}.sf-isect",
    output:
        svg="{sample}/fusion/{sample}.sf-isect-circos/fsnviz.svg",
        png="{sample}/fusion/{sample}.sf-isect-circos/fsnviz.png",
    singularity: containers["fsnviz"]
    shell:
        "PERL5LIB=\"\" fsnviz --out-dir `dirname {output.svg}` --png"
        " -k human.hg38 star-fusion {input.txt}"

rule combine_plots:
    input:
        sf="{sample}/fusion/{sample}.star-fusion.svg",
        fc="{sample}/fusion/{sample}.fusioncatcher.svg",
        isect="{sample}/fusion/{sample}.sf-isect.svg",
        combine_script=config["plot_combined_script"]
    output:
        svg="{sample}/fusion/{sample}.fusions-combined.svg",
    singularity: containers["hamlet-scripts"]
    shell:
        "python3 {input.combine_script}"
        " 'STAR-Fusion':{input.sf} 'FusionCatcher':{input.fc}"
        " 'Intersection':{input.isect} {output.svg}"
