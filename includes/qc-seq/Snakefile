include: "common.smk"

pepfile: config["pepfile"]

samples = pep.sample_table["sample_name"]

localrules: rg_stats, sample_stats

rule all:
    input:
        fastqc_raw = expand(
            ("{sample}/qc-seq/{read_group}/fastqc-{{pair}}-raw".format(
                sample=s, read_group=rg
            )
            for rg, s in get_readgroup_per_sample()), pair=("R1", "R2")
        ),

        cutadapt = expand(
            ("{sample}/qc-seq/{read_group}/{sample}-{read_group}-{{pair}}.fq.gz".format(
                sample=s, read_group=rg
            )
            for rg, s in get_readgroup_per_sample()), pair=("R1", "R2")
        ),

        fastqc_processed = expand(
            ("{sample}/qc-seq/{read_group}/fastqc-{{pair}}-processed".format(
            sample=s, read_group=rg
            )
            for rg, s in get_readgroup_per_sample()), pair=("R1", "R2")
        ),

        rg_stats_json = [
            "{sample}/qc-seq/{read_group}/stats.json".format(
                sample=s, read_group=rg) for rg, s in get_readgroup_per_sample()
        ],

        sample_stats_json = expand("{sample}/qc-seq/{sample}.seq_stats.json",
                                    sample=samples,
        ),

        merged_fastqs = expand("{sample}/{sample}-{pair}.fq.gz", sample=samples,
                                pair=("R1", "R2")
        ),

        merged_raw = expand("{sample}/{sample}-{pair}.raw.fq.gz", sample=samples,
                                pair=("R1", "R2")
        )


rule fastqc_raw:
    """Runs FastQC for each pair of each read group of each sample given in the config file."""
    input:
        fq1=get_forward,
        fq2=get_reverse,
    output:
        folder=directory("{sample}/qc-seq/{read_group}/fastqc-{pair}-raw")
    threads: 4
    singularity: containers["fastqc"]
    shell:
        "mkdir -p {output.folder}"
        " && fastqc -o {output.folder} --dir /tmp --extract --nogroup -f fastq "
        "--threads {threads} {input.fq1} {input.fq2}"


rule cutadapt:
    """Clip fastq files"""
    input:
        fq1=get_forward,
        fq2=get_reverse
    output:
        fq1="{sample}/qc-seq/{read_group}/{sample}-{read_group}-R1.fq.gz",
        fq2="{sample}/qc-seq/{read_group}/{sample}-{read_group}-R2.fq.gz"
    singularity: containers["cutadapt"]
    shell: "cutadapt -a AGATCGGAAGAG -A AGATCGGAAGAG "
           "--minimum-length=20 --quality-cutoff=20,20 "
           "--output={output.fq1} --paired-output={output.fq2} "
           "{input.fq1} {input.fq2}"


rule fastqc_processed:
    """Runs FastQC for each pair of QC-ed inputs."""
    input:
        fq1="{sample}/qc-seq/{read_group}/{sample}-{read_group}-R1.fq.gz",
        fq2="{sample}/qc-seq/{read_group}/{sample}-{read_group}-R2.fq.gz"
    output:
        folder = directory("{sample}/qc-seq/{read_group}/fastqc-{pair}-processed")
    threads: 4
    singularity: containers["fastqc"]
    shell:
        "mkdir -p {output.folder}"
        " && fastqc -o {output.folder} --dir /tmp --extract --nogroup -f fastq "
        "--threads {threads} {input.fq1} {input.fq2}"


rule rg_stats:
    """Gathers read statistics on the read group level."""
    input:
        raw1="{sample}/qc-seq/{read_group}/fastqc-R1-raw",
        raw2="{sample}/qc-seq/{read_group}/fastqc-R2-raw",
        proc1="{sample}/qc-seq/{read_group}/fastqc-R1-processed",
        proc2="{sample}/qc-seq/{read_group}/fastqc-R2-processed",
        rg_stats_script=config["rg_stats_script"],
    output:
        stats="{sample}/qc-seq/{read_group}/stats.json",
    singularity: containers["crimson"]
    shell:
        "python {input.rg_stats_script} --name {wildcards.read_group}"
        " {input.raw1} {input.raw2} {input.proc1} {input.proc2}"
        " > {output.stats}"


rule sample_stats:
    """Gathers read statistics on the sample level."""
    input:
        rg_stats=get_sample_stats,
        sample_stats_script=config["sample_stats_script"]
    output:
        stats="{sample}/qc-seq/{sample}.seq_stats.json"
    singularity: containers["crimson"]
    shell:
        "python {input.sample_stats_script} --name {wildcards.sample}"
        " {input.rg_stats} > {output.stats}"


rule merge_fastqs_r1:
    """Merges all FASTQ files for a given sample from its read groups."""
    input:
        fqs = get_all_trimmed_forward,
    output:
        merged = "{sample}/{sample}-R1.fq.gz",
    singularity: containers["debian"]
    shell:
        "cp {input.fqs} {output.merged} || cat {input.fqs} > {output.merged}"


rule merge_fastqs_r2:
    """Merges all FASTQ files for a given sample from its read groups."""
    input:
        fqs = get_all_trimmed_reverse,
    output:
        merged = "{sample}/{sample}-R2.fq.gz",
    singularity: containers["debian"]
    shell:
        "cp {input.fqs} {output.merged} || cat {input.fqs} > {output.merged}"


rule merge_fastqs_raw_r1:
    """Merges all raw FASTQ files for a given sample from its read groups."""
    input:
        fqs = get_all_r1
    output:
        merged = temp("{sample}/{sample}-R1.raw.fq.gz")
    singularity: containers["debian"]
    shell:
        "cp {input.fqs} {output.merged} || cat {input.fqs} > {output.merged}"


rule merge_fastqs_raw_r2:
    """Merges all raw FASTQ files for a given sample from its read groups."""
    input:
        fqs = get_all_r2
    output:
        merged = temp("{sample}/{sample}-R2.raw.fq.gz")
    singularity: containers["debian"]
    shell:
        "cp {input.fqs} {output.merged} || cat {input.fqs} > {output.merged}"
