name: Continuous Integration

on:
  push:
  pull_request:
  workflow_call:

defaults:
  run:
    # This is needed for miniconda, see:
    # https://github.com/marketplace/actions/setup-miniconda#important.
    shell: bash -l {0}

jobs:
  quick-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test:
          - sanity
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Miniforge
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          activate-environment: HAMLET
          use-mamba: true

      - name: Install apptainer
        uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: 1.3.6

      # This is used to invalidate the conda environment every week
      - name: Get year and week (for conda cache)
        id: get-date
        run: echo "week=$(/bin/date -u '+%Y-w%V')" >> $GITHUB_OUTPUT
        shell: bash

      - name: Cache conda environment
        id: conda-cache
        uses: actions/cache@v4
        env:
          # Increase this value to manually invalidate the cache
          CACHE_NUMBER: 0
        with:
          path: ${{ env.CONDA }}/envs
          key: conda-${{ hashFiles('environment.yml') }}-${{ steps.get-date.outputs.week }}-${{ env.CACHE_NUMBER }}

      - name: Update HAMLET environment
        run: mamba env update -n HAMLET -f environment.yml
        if: steps.conda-cache.outputs.cache-hit != 'true'

      - name: Run test in conda environment
        run: >-
          pytest --keep-workflow-wd-on-fail
          --tag ${{ matrix.test }}

      - name: Check pytest stdout messages in case of failure
        if: ${{ failure() }}
        run: >-
          bash -c '
          for file in $(find /tmp -name log.out);
          do echo $file; cat $file; done'

      - name: Check pytest stderr messages in case of failure
        if: ${{ failure() }}
        run: >-
          bash -c '
          for file in $(find /tmp -name log.err);
          do echo $file; cat $file; done'
